var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/common/schematics/add/index", ["require", "exports", "@angular-devkit/core", "@angular-devkit/schematics", "@schematics/angular/utility/dependencies", "@schematics/angular/utility/json-file", "@schematics/angular/utility/workspace", "typescript", "@nguniversal/common/schematics/utils/index"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addUniversalCommonRule = void 0;
    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    const core_1 = require("@angular-devkit/core");
    const schematics_1 = require("@angular-devkit/schematics");
    const dependencies_1 = require("@schematics/angular/utility/dependencies");
    const json_file_1 = require("@schematics/angular/utility/json-file");
    const workspace_1 = require("@schematics/angular/utility/workspace");
    const ts = require("typescript");
    const utils_1 = require("@nguniversal/common/schematics/utils/index");
    const SERVE_SSR_TARGET_NAME = 'serve-ssr';
    const PRERENDER_TARGET_NAME = 'prerender';
    function addUniversalCommonRule(options) {
        return (host) => __awaiter(this, void 0, void 0, function* () {
            const clientProject = yield utils_1.getProject(host, options.clientProject);
            return schematics_1.chain([
                clientProject.targets.has('server')
                    ? schematics_1.noop()
                    : schematics_1.externalSchematic('@schematics/angular', 'universal', Object.assign(Object.assign({}, options), { skipInstall: true })),
                addScriptsRule(options),
                updateServerTsConfigRule(options),
                updateWorkspaceConfigRule(options),
                routingInitialNavigationRule(options),
                addDependencies(),
            ]);
        });
    }
    exports.addUniversalCommonRule = addUniversalCommonRule;
    function addScriptsRule(options) {
        return (host) => __awaiter(this, void 0, void 0, function* () {
            const pkgPath = '/package.json';
            const buffer = host.read(pkgPath);
            if (buffer === null) {
                throw new schematics_1.SchematicsException('Could not find package.json');
            }
            const serverDist = yield utils_1.getOutputPath(host, options.clientProject, 'server');
            const pkg = JSON.parse(buffer.toString());
            pkg.scripts = Object.assign(Object.assign({}, pkg.scripts), { 'dev:ssr': `ng run ${options.clientProject}:${SERVE_SSR_TARGET_NAME}`, 'serve:ssr': `node ${serverDist}/main.js`, 'build:ssr': `ng build --prod && ng run ${options.clientProject}:server:production`, 'prerender': `ng run ${options.clientProject}:${PRERENDER_TARGET_NAME}` });
            host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
        });
    }
    function updateWorkspaceConfigRule(options) {
        return () => {
            return workspace_1.updateWorkspace(workspace => {
                const projectName = options.clientProject;
                const project = workspace.projects.get(projectName);
                if (!project) {
                    return;
                }
                const serverTarget = project.targets.get('server');
                serverTarget.options.main = core_1.join(core_1.normalize(project.root), utils_1.stripTsExtension(options.serverFileName) + '.ts');
                const serveSSRTarget = project.targets.get(SERVE_SSR_TARGET_NAME);
                if (serveSSRTarget) {
                    return;
                }
                project.targets.add({
                    name: SERVE_SSR_TARGET_NAME,
                    builder: '@nguniversal/builders:ssr-dev-server',
                    options: {
                        browserTarget: `${projectName}:build`,
                        serverTarget: `${projectName}:server`,
                    },
                    configurations: {
                        production: {
                            browserTarget: `${projectName}:build:production`,
                            serverTarget: `${projectName}:server:production`,
                        },
                    },
                });
                const prerenderTarget = project.targets.get(PRERENDER_TARGET_NAME);
                if (prerenderTarget) {
                    return;
                }
                project.targets.add({
                    name: PRERENDER_TARGET_NAME,
                    builder: '@nguniversal/builders:prerender',
                    options: {
                        browserTarget: `${projectName}:build:production`,
                        serverTarget: `${projectName}:server:production`,
                        routes: ['/']
                    },
                    // Add a dummy production config to be consistent with other targets.
                    configurations: {
                        production: {},
                    },
                });
            });
        };
    }
    function updateServerTsConfigRule(options) {
        return (host) => __awaiter(this, void 0, void 0, function* () {
            const clientProject = yield utils_1.getProject(host, options.clientProject);
            const serverTarget = clientProject.targets.get('server');
            if (!serverTarget || !serverTarget.options) {
                return;
            }
            const tsConfigPath = serverTarget.options.tsConfig;
            if (!tsConfigPath || typeof tsConfigPath !== 'string') {
                // No tsconfig path
                return;
            }
            const tsConfig = new json_file_1.JSONFile(host, tsConfigPath);
            const filesAstNode = tsConfig.get(['files']);
            const serverFilePath = utils_1.stripTsExtension(options.serverFileName) + '.ts';
            if (Array.isArray(filesAstNode) && !filesAstNode.some(({ text }) => text === serverFilePath)) {
                tsConfig.modify(['files'], [
                    ...filesAstNode,
                    serverFilePath
                ]);
            }
        });
    }
    function routingInitialNavigationRule(options) {
        return (host) => __awaiter(this, void 0, void 0, function* () {
            const clientProject = yield utils_1.getProject(host, options.clientProject);
            const serverTarget = clientProject.targets.get('server');
            if (!serverTarget || !serverTarget.options) {
                return;
            }
            const tsConfigPath = serverTarget.options.tsConfig;
            if (!tsConfigPath || typeof tsConfigPath !== 'string' || !host.exists(tsConfigPath)) {
                // No tsconfig path
                return;
            }
            const parseConfigHost = {
                useCaseSensitiveFileNames: ts.sys.useCaseSensitiveFileNames,
                readDirectory: ts.sys.readDirectory,
                fileExists: function (fileName) {
                    return host.exists(fileName);
                },
                readFile: function (fileName) {
                    return host.read(fileName).toString();
                },
            };
            const { config } = ts.readConfigFile(tsConfigPath, parseConfigHost.readFile);
            const parsed = ts.parseJsonConfigFileContent(config, parseConfigHost, core_1.dirname(core_1.normalize(tsConfigPath)));
            const tsHost = ts.createCompilerHost(parsed.options, true);
            // Strip BOM as otherwise TSC methods (Ex: getWidth) will return an offset,
            // which breaks the CLI UpdateRecorder.
            // See: https://github.com/angular/angular/pull/30719
            tsHost.readFile = function (fileName) {
                return host.read(fileName).toString().replace(/^\uFEFF/, '');
            };
            tsHost.directoryExists = function (directoryName) {
                // When the path is file getDir will throw.
                try {
                    const dir = host.getDir(directoryName);
                    return !!(dir.subdirs.length || dir.subfiles.length);
                }
                catch (_a) {
                    return false;
                }
            };
            tsHost.fileExists = function (fileName) {
                return host.exists(fileName);
            };
            tsHost.realpath = function (path) {
                return path;
            },
                tsHost.getCurrentDirectory = function () {
                    return host.root.path;
                };
            const program = ts.createProgram(parsed.fileNames, parsed.options, tsHost);
            const typeChecker = program.getTypeChecker();
            const sourceFiles = program.getSourceFiles().filter(f => !f.isDeclarationFile && !program.isSourceFileFromExternalLibrary(f));
            const printer = ts.createPrinter();
            const routerModule = 'RouterModule';
            const routerSource = '@angular/router';
            sourceFiles.forEach(sourceFile => {
                const routerImport = utils_1.findImport(sourceFile, routerSource, routerModule);
                if (!routerImport) {
                    return;
                }
                let routerModuleNode;
                ts.forEachChild(sourceFile, function visitNode(node) {
                    if (ts.isCallExpression(node) && ts.isPropertyAccessExpression(node.expression) &&
                        ts.isIdentifier(node.expression.expression) && node.expression.name.text === 'forRoot') {
                        const imp = utils_1.getImportOfIdentifier(typeChecker, node.expression.expression);
                        if (imp && imp.name === routerModule && imp.importModule === routerSource) {
                            routerModuleNode = node;
                        }
                    }
                    ts.forEachChild(node, visitNode);
                });
                if (routerModuleNode) {
                    const print = printer.printNode(ts.EmitHint.Unspecified, utils_1.addInitialNavigation(routerModuleNode), sourceFile);
                    const recorder = host.beginUpdate(sourceFile.fileName);
                    recorder.remove(routerModuleNode.getStart(), routerModuleNode.getWidth());
                    recorder.insertRight(routerModuleNode.getStart(), print);
                    host.commitUpdate(recorder);
                }
            });
        });
    }
    function addDependencies() {
        return host => {
            dependencies_1.addPackageJsonDependency(host, {
                name: '@nguniversal/builders',
                type: dependencies_1.NodeDependencyType.Dev,
                version: '^11.0.1',
            });
            return host;
        };
    }
});
//# sourceMappingURL=data:application/json;base64,