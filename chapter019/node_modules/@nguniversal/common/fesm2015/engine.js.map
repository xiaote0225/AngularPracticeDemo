{"version":3,"file":"engine.js","sources":["../../../../../../modules/common/engine/src/utils.ts","../../../../../../modules/common/engine/src/file-loader.ts","../../../../../../modules/common/engine/src/engine.ts","../../../../../../modules/common/engine/src/index.ts","../../../../../../modules/common/engine/private_api.ts","../../../../../../modules/common/engine/public_api.ts","../../../../../../modules/common/engine/index.ts","../../../../../../modules/common/engine/engine.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as fs from 'fs';\nimport { promisify } from 'util';\n\nexport const readFile = promisify(fs.readFile);\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ResourceLoader } from '@angular/compiler';\nimport { readFile } from './utils';\n\n/** ResourceLoader implementation for loading files */\nexport class FileLoader implements ResourceLoader {\n  get(url: string): Promise<string> {\n    return readFile(url, 'utf-8');\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ResourceLoader } from '@angular/compiler';\nimport { Compiler, CompilerFactory, NgModuleFactory, StaticProvider, Type } from '@angular/core';\nimport { INITIAL_CONFIG, platformDynamicServer, renderModuleFactory } from '@angular/platform-server';\n\nimport { FileLoader } from './file-loader';\nimport { readFile } from './utils';\n\n/** These are the allowed options for the render */\nexport interface RenderOptions {\n  bootstrap: Type<{}> | NgModuleFactory<{}>;\n  providers?: StaticProvider[];\n  url?: string;\n  document?: string;\n  documentFilePath?: string;\n}\n\n/**\n * A common rendering engine utility. This abstracts the logic\n * for handling the platformServer compiler, the module cache, and\n * the document loader\n */\nexport class CommonEngine {\n\n  /** Return an instance of the platformServer compiler */\n  getCompiler(): Compiler {\n    const compilerFactory: CompilerFactory = platformDynamicServer().injector.get(CompilerFactory);\n\n    return compilerFactory.createCompiler([\n      {providers: [{provide: ResourceLoader, useClass: FileLoader, deps: []}]}\n    ]);\n  }\n\n  private factoryCacheMap = new Map<Type<{}>, NgModuleFactory<{}>>();\n  private templateCache = new Map<string, string>();\n\n  constructor(private moduleOrFactory?: Type<{}> | NgModuleFactory<{}>,\n              private providers: StaticProvider[] = []) {}\n\n  /**\n   * Render an HTML document for a specific URL with specified\n   * render options\n   */\n  async render(opts: RenderOptions): Promise<string> {\n    // if opts.document dosen't exist then opts.documentFilePath must\n    const doc = opts.document || opts.documentFilePath && await this.getDocument(opts.documentFilePath);\n    const extraProviders = [\n      ...(opts.providers || []),\n      ...(this.providers || []),\n      {\n        provide: INITIAL_CONFIG,\n        useValue: {\n          document: doc,\n          url: opts.url\n        }\n      }\n    ];\n\n    const moduleOrFactory = this.moduleOrFactory || opts.bootstrap;\n    const factory = await this.getFactory(moduleOrFactory);\n\n    return renderModuleFactory(factory, {extraProviders});\n  }\n\n  /** Return the factory for a given engine instance */\n  async getFactory(moduleOrFactory: Type<{}> | NgModuleFactory<{}>): Promise<NgModuleFactory<{}>> {\n    // If module has been compiled AoT\n    if (moduleOrFactory instanceof NgModuleFactory) {\n      return moduleOrFactory;\n    } else {\n      // we're in JIT mode\n      const moduleFactory = this.factoryCacheMap.get(moduleOrFactory);\n\n      // If module factory is cached\n      if (moduleFactory) {\n        return moduleFactory;\n      }\n\n      // Compile the module and cache it\n      const factory = await this.getCompiler().compileModuleAsync(moduleOrFactory);\n      this.factoryCacheMap.set(moduleOrFactory, factory);\n\n      return factory;\n    }\n  }\n\n  /** Retrieve the document from the cache or the filesystem */\n  async getDocument(filePath: string): Promise<string> {\n    let doc = this.templateCache.get(filePath);\n\n    if (!doc) {\n      doc = await readFile(filePath, 'utf-8');\n      this.templateCache.set(filePath, doc);\n    }\n\n    return doc;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './file-loader';\nexport * from './engine';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {\n  FileLoader as ɵFileLoader,\n  CommonEngine as ɵCommonEngine,\n  RenderOptions as ɵRenderOptions,\n} from './src/index';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './private_api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["fs.readFile"],"mappings":";;;;;;;AAAA;;;;;;;AAWO,MAAM,QAAQ,GAAG,SAAS,CAACA,UAAW,CAAC;;ACD9C;MACa,UAAU;IACrB,GAAG,CAAC,GAAW;QACb,OAAO,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;KAC/B;;;ACSH;;;;;MAKa,YAAY;IAcvB,YAAoB,eAAgD,EAChD,YAA8B,EAAE;QADhC,oBAAe,GAAf,eAAe,CAAiC;QAChD,cAAS,GAAT,SAAS,CAAuB;QAJ5C,oBAAe,GAAG,IAAI,GAAG,EAAiC,CAAC;QAC3D,kBAAa,GAAG,IAAI,GAAG,EAAkB,CAAC;KAGM;;IAZxD,WAAW;QACT,MAAM,eAAe,GAAoB,qBAAqB,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAE/F,OAAO,eAAe,CAAC,cAAc,CAAC;YACpC,EAAC,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAC,CAAC,EAAC;SACzE,CAAC,CAAC;KACJ;;;;;IAYK,MAAM,CAAC,IAAmB;;;YAE9B,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,gBAAgB,KAAI,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA,CAAC;YACpG,MAAM,cAAc,GAAG;gBACrB,IAAI,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC;gBACzB,IAAI,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC;gBACzB;oBACE,OAAO,EAAE,cAAc;oBACvB,QAAQ,EAAE;wBACR,QAAQ,EAAE,GAAG;wBACb,GAAG,EAAE,IAAI,CAAC,GAAG;qBACd;iBACF;aACF,CAAC;YAEF,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,SAAS,CAAC;YAC/D,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;YAEvD,OAAO,mBAAmB,CAAC,OAAO,EAAE,EAAC,cAAc,EAAC,CAAC,CAAC;SACvD;KAAA;;IAGK,UAAU,CAAC,eAA+C;;;YAE9D,IAAI,eAAe,YAAY,eAAe,EAAE;gBAC9C,OAAO,eAAe,CAAC;aACxB;iBAAM;;gBAEL,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;;gBAGhE,IAAI,aAAa,EAAE;oBACjB,OAAO,aAAa,CAAC;iBACtB;;gBAGD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;gBAC7E,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;gBAEnD,OAAO,OAAO,CAAC;aAChB;SACF;KAAA;;IAGK,WAAW,CAAC,QAAgB;;YAChC,IAAI,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAE3C,IAAI,CAAC,GAAG,EAAE;gBACR,GAAG,GAAG,MAAM,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBACxC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;aACvC;YAED,OAAO,GAAG,CAAC;SACZ;KAAA;;;ACtGH;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;"}